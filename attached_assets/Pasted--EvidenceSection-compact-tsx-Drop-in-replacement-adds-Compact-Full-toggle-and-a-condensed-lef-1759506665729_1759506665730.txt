// EvidenceSection.compact.tsx
// Drop-in replacement: adds Compact/Full toggle and a condensed left rail.

import { useState } from "react";
import { FlaskConical, Brain, ShieldCheck, Users2, BarChart3, Quote } from "lucide-react";

type PrincipleKey = "psychSafety" | "anonymity" | "thresholds" | "nudge" | "actionLoops";

const PRINCIPLES: Record<PrincipleKey, {
  title: string;
  blurb: string;
  bullet: string;
  badge: string;
  icon: React.ElementType;
}> = {
  psychSafety: {
    title: "Psychological safety → participation",
    blurb: "When people feel safe from retaliation, diverse voices show up—and stay.",
    bullet: "Anonymous prompts lift participation, especially among quieter contributors.",
    badge: "+42% reports",
    icon: Brain,
  },
  anonymity: {
    title: "Anonymity reduces self-censorship",
    blurb: "Identity risk skews feedback. Removing it increases candor and early signal.",
    bullet: "People share issues sooner when identity isn’t inferred.",
    badge: "↑ candor",
    icon: ShieldCheck,
  },
  thresholds: {
    title: "K-anonymity protects the long tail",
    blurb: "Small-n topics are most revealing. Thresholds prevent re-identification by omission.",
    bullet: "Views & exports suppress topics with count < k.",
    badge: "no small-n",
    icon: BarChart3,
  },
  nudge: {
    title: "Nudges beat policies",
    blurb: "Frictions at the moment of posting steer behavior better than docs no one reads.",
    bullet: "Language hints + gentle rails keep things constructive.",
    badge: "fewer incidents",
    icon: Users2,
  },
  actionLoops: {
    title: "Closed loops drive trust",
    blurb: "Fast summaries with visible outcomes turn feedback into a habit, not a vent.",
    bullet: "Weekly digests → decisions → broadcast change.",
    badge: "habit formed",
    icon: FlaskConical,
  },
};

const QUOTES = [
  { quote: "I finally shared something I’d sat on for months.", who: "Senior IC, Eng" },
  { quote: "The weekly themes changed our roadmap conversation.", who: "Director, Product" },
  { quote: "Anonymous doesn’t mean unaccountable—k-thresholds make it sane.", who: "People Ops" },
];

export default function EvidenceSection() {
  const [active, setActive] = useState<PrincipleKey>("psychSafety");
  // Compact by default on large screens; you can force true/false if you want.
  const [compact, setCompact] = useState<boolean>(true);

  return (
    <section className="relative isolate">
      <div className="pointer-events-none absolute inset-0 -z-10 bg-[radial-gradient(1200px_400px_at_50%_-10%,rgba(16,185,129,0.10),transparent)]" />

      <div className="mx-auto max-w-6xl px-6 py-24 lg:py-28">
        {/* Header */}
        <header className="mb-6 flex flex-col gap-4 md:mb-10 md:flex-row md:items-end md:justify-between">
          <div>
            <p className="font-mono text-sm uppercase tracking-wide text-muted-foreground">Evidence lab</p>
            <h2 className="mt-2 text-4xl font-semibold tracking-tight md:text-5xl">
              Built on science, tuned for real teams
            </h2>
            <p className="mt-3 max-w-2xl text-lg text-muted-foreground">
              We don’t guess how humans behave—we design for it. Below are the principles we implement on-by-default.
            </p>
          </div>

          {/* Compact / Full toggle */}
          <div className="inline-flex select-none items-center gap-3 self-start rounded-xl border bg-background p-2 text-sm shadow">
            <button
              onClick={() => setCompact(true)}
              className={`rounded-lg px-3 py-1.5 ${compact ? "bg-emerald-600 text-white" : "hover:bg-muted"}`}
              aria-pressed={compact}
            >
              Compact
            </button>
            <button
              onClick={() => setCompact(false)}
              className={`rounded-lg px-3 py-1.5 ${!compact ? "bg-emerald-600 text-white" : "hover:bg-muted"}`}
              aria-pressed={!compact}
            >
              Full
            </button>
          </div>
        </header>

        {/* Big Principle Switcher */}
        <div className="grid gap-8 md:grid-cols-12">
          {/* LEFT rail */}
          <aside className={`md:col-span-5 ${compact ? "space-y-2" : "space-y-2"}`}>
            {compact ? (
              // Compact: two-column chip grid — short height
              <div className="grid grid-cols-2 gap-2">
                {(Object.keys(PRINCIPLES) as PrincipleKey[]).map((key) => {
                  const p = PRINCIPLES[key];
                  const isActive = key === active;
                  const Icon = p.icon;
                  return (
                    <button
                      key={key}
                      onClick={() => setActive(key)}
                      className={[
                        "flex items-center justify-between rounded-xl px-3 py-3 text-left ring-1 ring-black/5",
                        isActive ? "bg-background shadow-sm" : "bg-muted hover:bg-muted/70",
                      ].join(" ")}
                      aria-pressed={isActive}
                    >
                      <div className="flex items-center gap-2">
                        <span className={["flex h-7 w-7 items-center justify-center rounded-lg",
                          isActive ? "bg-emerald-600 text-white" : "bg-foreground/10 text-foreground/80"
                        ].join(" ")}>
                          <Icon className="h-4 w-4" />
                        </span>
                        <span className="line-clamp-1 text-sm font-medium">{p.title}</span>
                      </div>
                      <span className="ml-2 rounded-full bg-emerald-50 px-2 py-0.5 text-[10px] font-medium text-emerald-700 ring-1 ring-emerald-200">
                        {p.badge}
                      </span>
                    </button>
                  );
                })}
              </div>
            ) : (
              // Full: original tall cards with blurb
              <div className="space-y-2">
                {(Object.keys(PRINCIPLES) as PrincipleKey[]).map((key) => {
                  const p = PRINCIPLES[key];
                  const isActive = key === active;
                  const Icon = p.icon;
                  return (
                    <button
                      key={key}
                      onClick={() => setActive(key)}
                      className={[
                        "w-full rounded-2xl p-5 text-left transition-all ring-1 ring-black/5",
                        isActive ? "bg-background shadow-[0_1px_0_rgba(0,0,0,0.06),0_24px_48px_-24px_rgba(0,0,0,0.25)]" : "bg-muted hover:bg-muted/70"
                      ].join(" ")}
                      aria-pressed={isActive}
                    >
                      <div className="flex items-start gap-4">
                        <span className={["flex h-12 w-12 flex-none items-center justify-center rounded-xl",
                          isActive ? "bg-emerald-600 text-white" : "bg-foreground/10 text-foreground/80"
                        ].join(" ")}>
                          <Icon className="h-6 w-6" />
                        </span>
                        <div>
                          <div className="flex items-center gap-2">
                            <h3 className="text-xl font-semibold leading-tight">{p.title}</h3>
                            <span className="rounded-full bg-emerald-50 px-2.5 py-1 text-xs font-medium text-emerald-700 ring-1 ring-emerald-200">
                              {p.badge}
                            </span>
                          </div>
                          <p className="mt-1 text-sm text-muted-foreground">{p.blurb}</p>
                        </div>
                      </div>
                    </button>
                  );
                })}
              </div>
            )}
          </aside>

          {/* RIGHT panel: evidence card + quotes (unchanged) */}
          <div className="md:col-span-7">
            <div className="relative overflow-hidden rounded-3xl border bg-background p-6 shadow-[0_1px_0_rgba(0,0,0,0.06),0_28px_60px_-28px_rgba(0,0,0,0.25)]">
              <EvidenceCard active={active} />
              <div className="pointer-events-none absolute -inset-8 -z-10 rounded-[2rem] bg-gradient-to-tr from-emerald-200/30 via-transparent to-transparent blur-2xl" />
            </div>

            {/* Quote ticker */}
            <div className="mt-6 overflow-hidden">
              <div className="flex animate-[marquee_24s_linear_infinite] gap-6">
                {QUOTES.concat(QUOTES).map((q, i) => (
                  <figure key={i} className="flex min-w-[320px] items-start gap-3 rounded-2xl border bg-muted/60 p-4">
                    <Quote className="h-5 w-5 text-muted-foreground" />
                    <figcaption>
                      <div className="text-sm leading-snug text-foreground/90">“{q.quote}”</div>
                      <div className="mt-1 text-xs text-muted-foreground">{q.who}</div>
                    </figcaption>
                  </figure>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Footnotes */}
        <div className="mt-10 grid gap-3 rounded-2xl border bg-muted/40 p-4 text-xs text-muted-foreground md:grid-cols-3">
          <div><span className="font-mono">[1]</span> Participation ↑ when risk is reduced; anonymity can lift early signal in mixed-hierarchy groups.</div>
          <div><span className="font-mono">[2]</span> K-anonymity prevents re-identification via small-n inference across views/exports.</div>
          <div><span className="font-mono">[3]</span> Closed feedback loops strengthen contribution habits more than policy reminders.</div>
        </div>
      </div>
    </section>
  );
}

/* ---------- EvidenceCard, Pill, Bar, Stat helpers (same as before) ---------- */

function Pill({ children }: { children: React.ReactNode }) {
  return (
    <span className="rounded-full bg-foreground/5 px-2.5 py-1 text-xs text-foreground/70">
      {children}
    </span>
  );
}

function EvidenceCard({ active }: { active: PrincipleKey }) {
  // ... (use your existing EvidenceCard implementation from the previous version)
  return <div>{/* keep the same content from before */}</div>;
}

// If you don't still have Bar/Stat from earlier, re-add them under this comment.
