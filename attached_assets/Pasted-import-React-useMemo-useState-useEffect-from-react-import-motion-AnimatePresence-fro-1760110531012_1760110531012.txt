import React, { useMemo, useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Slider } from "@/components/ui/slider";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Switch } from "@/components/ui/switch";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import {
  Shield, EyeOff, Hash, ArrowRight, Sparkles, Quote, BarChart3, Terminal, LockKeyhole,
  Share2, Users
} from "lucide-react";

/** =============================
 *  UTILITIES (client-only)
 *  ============================= */
function fnv1aHex(str: string): string {
  let h = 0x811c9dc5;
  for (let i = 0; i < str.length; i++) {
    h ^= str.charCodeAt(i);
    h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);
  }
  return (h >>> 0).toString(16).padStart(8, "0");
}
function pseudoHandle(name: string) {
  const cleaned = (name || "teammate").trim().toLowerCase();
  return `user-${fnv1aHex(cleaned).slice(0, 6)}`;
}

/** =============================
 *  SCRUB v2 (robust)
 *  - Slack mentions/obfuscations/phones/ids/urls/ipv4/Luhn
 *  ============================= */
function luhnCheck(s: string) {
  const digits = s.replace(/\D/g, "");
  if (digits.length < 13) return false;
  let sum = 0, dbl = false;
  for (let i = digits.length - 1; i >= 0; i--) {
    let d = parseInt(digits[i], 10);
    if (dbl) { d *= 2; if (d > 9) d -= 9; }
    sum += d; dbl = !dbl;
  }
  return sum % 10 === 0;
}
function scrubPII(text: string) {
  if (!text) return "";
  let t = text;

  // Normalize basic obfuscations
  t = t
    .replace(/\[(at|dot)\]/gi, (m) => m.toLowerCase() === "[at]" ? "@" : ".")
    .replace(/\s+at\s+/gi, "@")
    .replace(/\s+dot\s+/gi, ".");

  // Slack mentions/groups/channels
  t = t.replace(/<@U[A-Z0-9]+>/g, "[@redacted]");
  t = t.replace(/<!subteam\^S[A-Z0-9]+(?:\|[^>]+)?>/g, "[@group]");
  t = t.replace(/<#C[A-Z0-9]+(?:\|[^>]+)?>/g, "[channel]");

  // Emails
  t = t.replace(/[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}/gi, "[email]");

  // Generic @handles (non-Slack)
  t = t.replace(/(^|\s)@([A-Za-z0-9_.-]+)/g, "$1[@redacted]");

  // Phones (broad)
  t = t.replace(/\+?\d[\d\s().-]{7,}\d/g, "[phone]");

  // Potential credit cards via Luhn
  t = t.replace(/\b(?:\d[ -]*?){13,19}\b/g, (m) => luhnCheck(m) ? "[card]" : m);

  // 6–10 digit IDs
  t = t.replace(/\b\d{6,10}\b/g, "[id]");

  // URLs
  t = t.replace(/https?:\/\/\S+/gi, "[link]");

  // IPv4
  t = t.replace(/\b(\d{1,3}\.){3}\d{1,3}\b/g, "[ip]");

  return t;
}
function highlightRedactions(scrubbed: string) {
  return scrubbed.replace(
    /\[(email|phone|id|link|card|ip|@redacted|channel|@group)\]/g,
    (m) => `<mark class="px-1 rounded bg-emerald-50 text-emerald-700">${m}</mark>`
  );
}

/** =============================
 *  ENCRYPTION (demo preview only)
 *  ============================= */
function fakeCipherPreview(plaintext: string) {
  const ct = fnv1aHex("ct::" + plaintext + Math.random().toString(36));
  const nonce = fnv1aHex("nonce::" + plaintext + Date.now());
  const aad = fnv1aHex("aad::demo-org|topic");
  return { ct, nonce, aad };
}

/** =============================
 *  THEME VOCAB (multi-label)
 *  - 40–50 lightweight terms per theme; adjust weights as needed.
 *  ============================= */
type Vocab = Record<string, Array<[string, number]>>;
const THEME_VOCAB: Vocab = {
  "Meetings": [
    ["meeting",1],["meetings",1],["calendar",1],["invite",0.9],["agenda",1],["action items",1.1],
    ["standup",1.3],["retro",1.2],["retrospective",1.2],["one on one",1.1],["1:1",1.1],
    ["too long",1.5],["overlong",1.3],["timebox",1.2],["zoom",0.9],["video call",0.9],
    ["reschedule",1],["cancel",0.8],["attendance",0.9],["facilitation",1.1],["notes",0.9],
    ["action",0.7],["follow up",1],["recording",0.8],["minutes",0.8],["sync",1],
    ["async",1],["status update",1],["stand up",1.3],["run over",1.2],["double booked",1.1],
    ["conflict",0.9],["invite list",1],["group meeting",0.9],["town hall",1.1],
    ["workshop",0.9],["planning",1],["grooming",1.1],["refinement",1.1],["all hands",1.1],
    ["facilitator",1],["parking lot",1],["calendar spam",1.2]
  ],
  "Process": [
    ["process",1.2],["policy",1.1],["workflow",1.2],["handoff",1.2],["handover",1.1],
    ["ticket",1.1],["triage",1.1],["queue",1],["backlog",1.1],["wip",1.1],
    ["sla",1.2],["intake",1.2],["approval",1.1],["review",1],["sign off",1.1],
    ["rfc",1.2],["working agreement",1.3],["dri",1.2],["owner",1],["responsible",1],
    ["playbook",1.2],["checklist",1.1],["template",1],["handoffs",1.2],["gate",1.1],
    ["cadence",1.1],["operating",1.1],["kpi",1.1],["okr",1.1],["sox",1.2],
    ["compliance",1.2],["incident process",1.2],["rca",1.2],["postmortem",1.2],
    ["sunset",1.1],["deprecation",1.1],["escalation",1.2],["introduction",0.8],
    ["change request",1.2],["SOP",1.2],["workflow step",1.1],["handover docs",1.1]
  ],
  "Tooling": [
    ["tool",1.1],["tools",1.1],["jira",1.3],["linear",1.2],["asana",1.2],["trello",1.1],
    ["slack",1.1],["github",1.2],["gitlab",1.2],["bitbucket",1.1],["build",1.1],
    ["pipeline",1.2],["ci",1.2],["cd",1.2],["deployment",1.2],["deploy",1.1],
    ["flake",1.1],["runner",1.1],["semaphore",1.1],["circleci",1.2],["actions",1.1],
    ["cloud",1],["aws",1.1],["gcp",1.1],["azure",1.1],["kubernetes",1.3],
    ["helm",1.1],["terraform",1.2],["pagerduty",1.2],["datadog",1.2],["grafana",1.2],
    ["sentry",1.2],["feature flag",1.1],["monitoring",1.1],["logging",1],["observability",1.2],
    ["sdk",1],["cli",1],["extension",1],["plugin",1],["integration",1.1],
    ["oncall",1.1],["runbook",1.1],["alert",1.1]
  ],
  "Culture": [
    ["culture",1.2],["respect",1.2],["blame",1.2],["psych safety",1.5],["psychological safety",1.5],
    ["inclusive",1.2],["inclusion",1.2],["diversity",1.1],["equity",1.1],["belonging",1.1],
    ["trust",1.2],["transparency",1.2],["openness",1.1],["accountability",1.1],["recognition",1.1],
    ["credit",1],["ownership",1.1],["silos",1.2],["collaboration",1.1],["communication",1.1],
    ["feedback",1.1],["retaliation",1.3],["safe space",1.3],["toxic",1.4],["bullying",1.4],
    ["favoritism",1.3],["empathy",1.1],["tone",1],["values",1],["mission",1],
    ["fairness",1.2],["opportunity",1.1],["trust gap",1.3],["team norms",1.2],
    ["inclusivity",1.2],["psych safety",1.5],["supportive",1.1]
  ],
  "Team Health": [
    ["burnout",1.6],["overworked",1.5],["stress",1.2],["capacity",1.2],["load",1.1],
    ["overtime",1.2],["work life",1.2],["balance",1.1],["pto",1.1],["vacation",1.1],
    ["hiring",1.2],["backfill",1.2],["headcount",1.2],["attrition",1.4],["turnover",1.4],
    ["morale",1.3],["engagement",1.2],["burn out",1.6],["sickness",1.1],["onboarding",1.1],
    ["offboarding",1.1],["ramp",1.1],["coverage",1.1],["workload",1.2],["bandwidth",1.2],
    ["understaffed",1.3],["support",1.1],["wellbeing",1.2],["exhausted",1.3],["availability",1.1],
    ["shorthanded",1.3],["motivation",1.1],["recharge",1.1]
  ],
  "Documentation": [
    ["docs",1.3],["documentation",1.3],["readme",1.2],["wiki",1.2],["confluence",1.3],
    ["notion",1.2],["playbook",1.2],["runbook",1.2],["how to",1.2],["guide",1.1],
    ["outdated",1.3],["stale",1.2],["missing",1.2],["up to date",1.1],["single source",1.2],
    ["source of truth",1.3],["knowledge base",1.3],["kb",1.2],["reference",1.1],["examples",1.1],
    ["api",1.1],["schema",1.2],["diagram",1.1],["architecture",1.1],["adr",1.2],
    ["decision record",1.2],["toc",1],["index",1],["search",1.1],["discoverability",1.2],
    ["tutorial",1.1],["walkthrough",1.1],["faq",1.1],["style guide",1.1],["glossary",1.1]
  ],
  "Quality": [
    ["bug",1.3],["bugs",1.3],["defect",1.2],["regression",1.3],["flaky",1.2],
    ["incident",1.3],["sev",1.2],["severity",1.2],["outage",1.3],["rollback",1.2],
    ["hotfix",1.2],["rca",1.2],["postmortem",1.2],["test coverage",1.2],["unit test",1.1],
    ["integration test",1.1],["qa",1.2],["quality",1.1],["perf",1.1],["latency",1.2],
    ["error rate",1.2],["crash",1.2],["freeze",1.1],["timeout",1.1],["alert",1.1],
    ["pager",1.1],["oncall",1.1],["monitor",1.1],["smoke test",1.1],["soak",1.1],
    ["canary",1.1],["leak",1.1],["memory",1.1],["regress",1.2]
  ],
  "Roadmap": [
    ["roadmap",1.5],["priority",1.2],["prioritization",1.2],["tradeoff",1.2],["timeline",1.2],
    ["deadline",1.2],["milestone",1.2],["q1",1.1],["q2",1.1],["q3",1.1],["q4",1.1],
    ["commitment",1.1],["scope",1.2],["scope creep",1.3],["estimate",1.1],["capacity",1.1],
    ["bet",1.1],["initiative",1.1],["strategy",1.2],["goal",1.1],["objective",1.1],
    ["okr",1.2],["kpi",1.1],["impact",1.1],["confidence",1.1],["dependency",1.2],
    ["sequence",1.1],["sequencing",1.1],["blocker",1.2],["unblock",1.2],["trade-offs",1.2],
    ["defer",1.1],["slot",1.1],["gantt",1.1],["plan",1.1],["plan of record",1.2]
  ]
};

/** =============================
 *  TOKENIZE + SCORE (multi-label)
 *  ============================= */
function tokens(s: string): string[] {
  return s.toLowerCase()
    .replace(/[`~!@#$%^&*()_+={}\[\]|;:'",.<>/?]/g, " ")
    .replace(/\s+/g, " ")
    .trim()
    .split(" ")
    .filter(Boolean);
}
function scoreThemes(text: string) {
  const tks = tokens(text);
  const joined = tks.join(" ");
  const scores: Record<string, { score: number; hits: string[] }> = {};
  for (const [theme, pairs] of Object.entries(THEME_VOCAB)) {
    let s = 0; const hits: string[] = [];
    for (const [term, w] of pairs) {
      const isBigram = term.includes(" ");
      const hit = isBigram ? joined.includes(term) : tks.includes(term);
      if (hit) { s += w * (isBigram ? 1.3 : 1); hits.push(term); }
    }
    scores[theme] = { score: s, hits };
  }
  return Object.entries(scores)
    .map(([k, v]) => ({ theme: k, ...v }))
    .filter((v) => v.hits.length >= 2 || v.score >= 1.5)
    .sort((a, b) => b.score - a.score)
    .slice(0, 3);
}

/** =============================
 *  RISK SCORE (k-aware guidance)
 *  ============================= */
function riskScore(text: string) {
  const hasProper = /\b([A-Z][a-z]+(\s|$)){2,4}/.test(text);          // crude proper names
  const hasTime = /(mon|tue|wed|thu|fri|sat|sun)|\b\d{1,2}:\d{2}\b/i.test(text);
  const digits = (text.match(/\d/g) || []).length;
  const long = text.length > 400 ? 1 : 0;
  const rareBigrams = (text.match(/\b(psych safety|postmortem|scope creep)\b/gi) || []).length;

  let s = 0;
  if (hasProper) s += 2;
  if (hasTime) s += 1;
  s += Math.min(2, digits / 6);
  s += long * 1;
  s += rareBigrams * 1.5;
  return Math.min(10, s); // 0–10
}

/** =============================
 *  CASES (quick-fill to prove scrub)
 *  ============================= */
type CaseKey = "email" | "slackMentions" | "phonesIdsLinks" | "namesDates";
const CASES: Record<CaseKey, { situation: string; behavior: string; impact: string }> = {
  email: {
    situation: "We ask customers to email support but the inbox is unmanaged.",
    behavior: "I saw messages like jane.doe@company.com and john [at] vendor [dot] io posted to Slack.",
    impact: "Sensitive data might leak and customers wait days for replies."
  },
  slackMentions: {
    situation: "Daily standup is going long.",
    behavior: "People tag <@U02AB3CDE> and <@U08XYZ1JK> for status; we also pull items from <#C01FEEDBACK|feedback>.",
    impact: "We spend 45 minutes and still miss blockers."
  },
  phonesIdsLinks: {
    situation: "Support tickets lack structure.",
    behavior: "Folks paste case #8823417, +1 (415) 555-0189, and docs at https://internal/wiki?id=123.",
    impact: "Hard to triage; PII may slip into threads."
  },
  namesDates: {
    situation: "Launch slipped last week.",
    behavior: "On Tuesday at 3:15pm, Sarah and Priya decided to push to 11/12 due to env issues.",
    impact: "Sales had to reset expectations; frustration increased."
  }
};

/** =============================
 *  PAGE COMPONENT
 *  ============================= */
export default function AnonSimulatorPage() {
  // SBI inputs
  const [name, setName] = useState("");
  const [situation, setSituation] = useState("");
  const [behavior, setBehavior] = useState("");
  const [impact, setImpact] = useState("");

  // Sim controls
  const [simulatedSignals, setSimulatedSignals] = useState(3);
  const [k, setK] = useState(5);
  const [privacyMode, setPrivacyMode] = useState(true);
  const [showRedactions, setShowRedactions] = useState(true);

  // Step control
  const [step, setStep] = useState<0 | 1 | 2 | 3 | 4>(0);

  // Compose message
  const combinedMessage = useMemo(() => {
    const parts: string[] = [];
    if (situation.trim()) parts.push(`Situation: ${situation.trim()}`);
    if (behavior.trim()) parts.push(`Behavior: ${behavior.trim()}`);
    if (impact.trim()) parts.push(`Impact: ${impact.trim()}`);
    return parts.join("\n\n");
  }, [situation, behavior, impact]);

  // Derived
  const handle = useMemo(() => pseudoHandle(name), [name]);
  const scrubbed = useMemo(() => scrubPII(combinedMessage), [combinedMessage]);
  const cipher = useMemo(() => fakeCipherPreview(scrubbed || combinedMessage), [scrubbed, combinedMessage]);

  // Multi-label themes (debounced + hysteresis)
  const [rawInput, setRawInput] = useState("");
  const [themeTop, setThemeTop] = useState<Array<{ theme: string; score: number; hits: string[] }>>([]);
  useEffect(() => { setRawInput(scrubbed || combinedMessage || ""); }, [scrubbed, combinedMessage]);
  useEffect(() => {
    const h = setTimeout(() => {
      const next = scoreThemes(rawInput);
      const changed =
        themeTop.length !== next.length ||
        themeTop.some((t, i) => !next[i] || t.theme !== next[i].theme || Math.abs(t.score - next[i].score) > 0.5);
      if (changed) setThemeTop(next);
    }, 600);
    return () => clearTimeout(h);
  }, [rawInput, themeTop]);

  // Risk meter
  const risk = useMemo(() => riskScore(scrubbed || combinedMessage || ""), [scrubbed, combinedMessage]);
  const riskLabel = risk < 3 ? "Low" : risk < 6 ? "Medium" : "High";
  const riskTip = risk >= 6
    ? "Remove names/dates or exact numbers."
    : risk >= 3
    ? "Trim specifics; keep the gist."
    : "Good: general enough to protect you.";

  const eligible = simulatedSignals >= k && (scrubbed || combinedMessage).length > 0;

  // Cases quick-fill
  function applyCase(key: CaseKey) {
    const c = CASES[key];
    setSituation(c.situation);
    setBehavior(c.behavior);
    setImpact(c.impact);
  }

  // Accessible live region
  useEffect(() => {
    const live = document.getElementById("aria-live");
    if (!live) return;
    live.textContent = `Step ${step + 1} of 5`;
  }, [step]);

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-gradient-to-b from-white to-slate-50">
        {/* Hero */}
        <section className="px-5 sm:px-8 pt-10 pb-6">
          <div className="max-w-6xl mx-auto flex flex-col gap-8 md:gap-10">
            <div className="flex flex-col items-start gap-4">
              <Badge className="rounded-2xl" variant="secondary">
                No LLM in the loop · k-anonymous by default
              </Badge>
              <h1 className="text-4xl md:text-5xl font-semibold tracking-tight">
                Speak up. <span className="text-transparent bg-clip-text bg-gradient-to-r from-emerald-600 to-teal-500">Stay safe.</span>
              </h1>
              <p className="text-slate-600 max-w-2xl">
                Try the <code className="px-1 py-0.5 rounded bg-slate-100">/teammato</code> flow with SBI. See how we scrub identity, encrypt content,
                group themes, and only quote when it’s safe.
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 items-start">
              {/* Input Card */}
              <Card className="lg:col-span-2 shadow-sm border-slate-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5" /> Try it yourself (S/B/I)
                  </CardTitle>
                  <CardDescription>All in your browser. Nothing leaves this page.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid sm:grid-cols-2 gap-3">
                    <div>
                      <label className="text-sm text-slate-600">Your name (stays in Slack)</label>
                      <Input
                        aria-label="Your name"
                        placeholder="e.g., Alex from Product"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                      />
                    </div>
                    <div className="flex items-center justify-between gap-3 mt-1 sm:mt-6">
                      <div className="flex items-center gap-2">
                        <Switch id="privacy" checked={privacyMode} onCheckedChange={setPrivacyMode} />
                        <label htmlFor="privacy" className="text-sm text-slate-600">
                          Privacy mode (no console logs, no network)
                        </label>
                      </div>
                      <div className="flex items-center gap-2">
                        <Switch id="showred" checked={showRedactions} onCheckedChange={setShowRedactions} />
                        <label htmlFor="showred" className="text-sm text-slate-600">Show redactions</label>
                      </div>
                    </div>
                  </div>

                  {/* Cases quick-fill */}
                  <div className="flex flex-wrap gap-2">
                    <Button variant="outline" size="sm" onClick={() => applyCase("email")}>Case: Contains email</Button>
                    <Button variant="outline" size="sm" onClick={() => applyCase("slackMentions")}>Case: Slack mentions</Button>
                    <Button variant="outline" size="sm" onClick={() => applyCase("phonesIdsLinks")}>Case: Phones/IDs/links</Button>
                    <Button variant="outline" size="sm" onClick={() => applyCase("namesDates")}>Case: Names/dates</Button>
                  </div>

                  {/* SBI Inputs */}
                  <div className="grid gap-3">
                    <div>
                      <label className="text-sm text-slate-600">Situation</label>
                      <Textarea
                        aria-label="Situation"
                        placeholder="Brief context. What’s going on?"
                        rows={3}
                        value={situation}
                        onChange={(e) => setSituation(e.target.value)}
                      />
                    </div>
                    <div>
                      <label className="text-sm text-slate-600">Behavior</label>
                      <Textarea
                        aria-label="Behavior"
                        placeholder="What did you observe? Be specific."
                        rows={3}
                        value={behavior}
                        onChange={(e) => setBehavior(e.target.value)}
                      />
                    </div>
                    <div>
                      <label className="text-sm text-slate-600">Impact</label>
                      <Textarea
                        aria-label="Impact"
                        placeholder="Why does it matter? Who/what is affected?"
                        rows={3}
                        value={impact}
                        onChange={(e) => setImpact(e.target.value)}
                      />
                    </div>
                  </div>

                  <div className="flex flex-wrap items-center gap-3">
                    <Button size="lg" onClick={() => setStep(1)} disabled={!combinedMessage.trim()}>
                      Simulate <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                    <div className="text-sm text-slate-500">We’ll walk you through each protection layer.</div>
                  </div>
                </CardContent>
              </Card>

              {/* Sticky Admin Rail */}
              <Card className="sticky top-6 shadow-sm border-slate-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="h-5 w-5 text-emerald-600" /> Admin view
                  </CardTitle>
                  <CardDescription>What admins see at a glance</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="text-xs text-slate-500">Pseudonymous handle</div>
                  <div className="flex items-center gap-2">
                    <Hash className="h-4 w-4" />
                    <code className="text-sm bg-slate-100 rounded px-2 py-1">{handle}</code>
                  </div>

                  <Separator />

                  <div className="text-xs text-slate-500">Stored content (demo)</div>
                  <div className="rounded-lg border bg-slate-50 p-3 text-xs font-mono">
                    <div>ct: <span className="select-all">{cipher.ct}</span></div>
                    <div>nonce: <span className="select-all">{cipher.nonce}</span></div>
                    <div>aad: <span className="select-all">{cipher.aad}</span></div>
                  </div>

                  <Separator />

                  <div className="text-xs text-slate-500">Themes (top 3)</div>
                  <div className="flex flex-wrap gap-2">
                    {themeTop.length === 0 ? (
                      <Badge variant="outline">No theme yet</Badge>
                    ) : themeTop.map(t => (
                      <Tooltip key={t.theme}>
                        <TooltipTrigger asChild>
                          <Badge variant="secondary">{t.theme} · {Math.round(t.score * 10)}</Badge>
                        </TooltipTrigger>
                        <TooltipContent>Matches: {t.hits.slice(0, 5).join(", ")}</TooltipContent>
                      </Tooltip>
                    ))}
                  </div>

                  <Separator />

                  <div className="text-xs text-slate-500">Quote eligibility & risk</div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span>Signals in theme</span>
                      <div className="flex items-center gap-2">
                        <Users className="h-4 w-4" />
                        <span className="font-medium">{simulatedSignals}</span>
                      </div>
                    </div>
                    <Progress value={Math.min(100, (simulatedSignals / Math.max(1, k)) * 100)} />
                    <div className="flex items-center justify-between text-sm">
                      <span>k-threshold</span>
                      <span className="font-medium">{k}</span>
                    </div>
                    <div className={cn("text-sm font-medium", eligible ? "text-emerald-700" : "text-slate-600")}>
                      {eligible ? "Eligible to quote (scrubbed only)" : "Held back to protect anonymity"}
                    </div>

                    <Separator />

                    <div className="text-xs text-slate-500">Anonymity risk</div>
                    <div className="flex items-center justify-between">
                      <Badge variant={risk < 3 ? "secondary" : risk < 6 ? "outline" : "destructive"}>
                        {risk < 3 ? "Low" : risk < 6 ? "Medium" : "High"}
                      </Badge>
                      <span className="text-sm text-slate-600">{riskTip}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* Flow Chips */}
        <section className="px-5 sm:px-8 pb-4">
          <div className="max-w-6xl mx-auto">
            <div className="flex flex-wrap gap-2">
              <Badge variant={step === 0 ? "default" : "secondary"}>Slack</Badge>
              <Badge variant={step === 1 ? "default" : "secondary"}>Scrub</Badge>
              <Badge variant={step === 2 ? "default" : "secondary"}>Encrypt</Badge>
              <Badge variant={step === 3 ? "default" : "secondary"}>Cluster</Badge>
              <Badge variant={step === 4 ? "default" : "secondary"}>Digest</Badge>
            </div>
          </div>
        </section>

        {/* Interactive Steps */}
        <section className="px-5 sm:px-8 pb-16">
          <div className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-6">
              <AnimatePresence mode="wait">
                {/* Step 0: Slack */}
                {step === 0 && (
                  <motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -12 }}>
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2"><Terminal className="h-5 w-5" /> Step 1 · Slack</CardTitle>
                        <CardDescription>Identity stays in Slack. We never receive your name or handle.</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="grid md:grid-cols-2 gap-4">
                          <div>
                            <div className="text-xs text-slate-500 mb-1">You type</div>
                            <div className="rounded-lg border p-3 bg-white">
                              <div className="text-sm text-slate-500">@{name || "your-name"}</div>
                              <div className="mt-2 text-slate-800 whitespace-pre-wrap">{combinedMessage || "(your SBI feedback)"}</div>
                            </div>
                          </div>
                          <div>
                            <div className="text-xs text-slate-500 mb-1">What we receive</div>
                            <div className="rounded-lg border p-3 bg-white">
                              <div className="text-sm text-slate-500">identity: <span className="font-mono">(not sent)</span></div>
                              <div className="mt-2 text-slate-800 whitespace-pre-wrap">
                                {combinedMessage ? combinedMessage : "(message body only)"}
                              </div>
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Button onClick={() => setStep(1)}>Next: Scrub <ArrowRight className="ml-2 h-4 w-4" /></Button>
                          <div className="text-sm text-slate-500">We strip identity <b>before</b> storage or logs.</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}

                {/* Step 1: Scrub */}
                {step === 1 && (
                  <motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -12 }}>
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2"><EyeOff className="h-5 w-5" /> Step 2 · Scrub</CardTitle>
                        <CardDescription>We filter emails, @mentions, IDs, phone numbers, and links on ingestion.</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="grid md:grid-cols-2 gap-4">
                          <div>
                            <div className="text-xs text-slate-500 mb-1">Before</div>
                            <div className="rounded-lg border p-3 bg-white text-slate-800 whitespace-pre-wrap">
                              {combinedMessage || "(your SBI feedback)"}
                            </div>
                          </div>
                          <div>
                            <div className="text-xs text-slate-500 mb-1">After</div>
                            <div className="rounded-lg border p-3 bg-white text-slate-800 whitespace-pre-wrap">
                              {showRedactions
                                ? <span dangerouslySetInnerHTML={{ __html: highlightRedactions(scrubbed || "") }} />
                                : (scrubbed || "(scrubbed preview)")}
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Button onClick={() => setStep(2)}>Next: Encrypt <ArrowRight className="ml-2 h-4 w-4" /></Button>
                          <div className="text-sm text-slate-500">PII is replaced <b>before</b> persistence.</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}

                {/* Step 2: Encrypt */}
                {step === 2 && (
                  <motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -12 }}>
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2"><LockKeyhole className="h-5 w-5" /> Step 3 · Encrypt</CardTitle>
                        <CardDescription>We lock bodies at rest (XChaCha20-Poly1305 AEAD). Admins don’t query raw text.</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="grid md:grid-cols-2 gap-4">
                          <div>
                            <div className="text-xs text-slate-500 mb-1">Input to encrypt</div>
                            <div className="rounded-lg border p-3 bg-white text-slate-800 whitespace-pre-wrap">
                              {(scrubbed || combinedMessage) || "(scrubbed text)"}
                            </div>
                          </div>
                          <div>
                            <div className="text-xs text-slate-500 mb-1">Stored preview (demo)</div>
                            <div className="rounded-lg border p-3 bg-slate-50 text-xs font-mono">
                              ct: {cipher.ct}<br />nonce: {cipher.nonce}<br />aad: {cipher.aad}
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Button onClick={() => setStep(3)}>Next: Cluster <ArrowRight className="ml-2 h-4 w-4" /></Button>
                          <div className="text-sm text-slate-500">Plaintext is not stored in databases or logs.</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}

                {/* Step 3: Cluster */}
                {step === 3 && (
                  <motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -12 }}>
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2"><BarChart3 className="h-5 w-5" /> Step 4 · Cluster</CardTitle>
                        <CardDescription>We group similar feedback into themes. No LLM involved.</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-5">
                        {/* Themes top-3 with “why” */}
                        <div>
                          <div className="text-xs text-slate-500 mb-1">Detected themes</div>
                          <div className="flex flex-wrap gap-2">
                            {themeTop.length === 0 ? (
                              <Badge variant="outline">No theme yet</Badge>
                            ) : themeTop.map(t => (
                              <Tooltip key={t.theme}>
                                <TooltipTrigger asChild>
                                  <Badge variant="secondary">{t.theme} · {Math.round(t.score * 10)}</Badge>
                                </TooltipTrigger>
                                <TooltipContent>Matches: {t.hits.slice(0, 5).join(", ")}</TooltipContent>
                              </Tooltip>
                            ))}
                          </div>
                        </div>

                        <div className="grid sm:grid-cols-2 gap-4">
                          <div>
                            <div className="flex items-center justify-between text-sm mb-1">
                              <span>Signals in theme</span>
                              <span className="font-medium">{simulatedSignals}</span>
                            </div>
                            <Slider value={[simulatedSignals]} min={0} max={12} step={1} onValueChange={(v) => setSimulatedSignals(v[0])} />
                          </div>
                          <div className="space-y-2">
                            <div className="flex items-center justify-between text-sm">
                              <span>k-threshold</span>
                              <span className="font-medium">{k}</span>
                            </div>
                            <Slider value={[k]} min={3} max={10} step={1} onValueChange={(v) => setK(v[0])} />
                          </div>
                        </div>

                        <div className="flex items-center gap-3">
                          <Button onClick={() => setStep(4)}>Next: Digest <ArrowRight className="ml-2 h-4 w-4" /></Button>
                          <div className="text-sm text-slate-500">No chatbot reads your words—just math for grouping.</div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}

                {/* Step 4: Digest */}
                {step === 4 && (
                  <motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -12 }}>
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2"><Quote className="h-5 w-5" /> Step 5 · Digest</CardTitle>
                        <CardDescription>Weekly themes & trends. Quotes appear only when it’s safe (≥ k).</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-5">
                        <div className="grid md:grid-cols-2 gap-4">
                          <div className="rounded-lg border p-4 bg-white">
                            <div className="text-xs text-slate-500 mb-1">Digest preview</div>
                            <div className="text-sm font-medium">
                              Themes:{" "}
                              {themeTop.length === 0
                                ? <span className="text-slate-500">—</span>
                                : themeTop.map((t, i) => <Badge key={t.theme} variant="outline" className="ml-1">{i+1}. {t.theme}</Badge>)}
                            </div>
                            <ul className="mt-2 list-disc pl-5 text-sm text-slate-700 space-y-1">
                              <li>Change week-over-week: <span className="font-medium">+2</span></li>
                              <li>Related: <span className="font-medium">Process</span></li>
                            </ul>
                            <Separator className="my-3" />
                            <div className="text-xs text-slate-500 mb-1">Quotes</div>
                            {eligible ? (
                              <blockquote className="text-slate-800 italic whitespace-pre-wrap">
                                {scrubbed}
                              </blockquote>
                            ) : (
                              <div className="text-slate-600">Held back to protect anonymity (need ≥ k signals).</div>
                            )}
                            <Separator className="my-3" />
                            <div className="text-xs text-slate-500 mb-1">Anonymity risk</div>
                            <div className="flex items-center justify-between">
                              <Badge variant={risk < 3 ? "secondary" : risk < 6 ? "outline" : "destructive"}>
                                {risk < 3 ? "Low" : risk < 6 ? "Medium" : "High"}
                              </Badge>
                              <span className="text-sm text-slate-600">{riskTip}</span>
                            </div>
                          </div>
                          <div className="rounded-lg border p-4 bg-slate-50">
                            <div className="text-xs text-slate-500 mb-1">Why this protects you</div>
                            <ul className="list-disc pl-5 text-sm text-slate-700 space-y-2">
                              <li>Identity remains in Slack — not stored here.</li>
                              <li>We scrub PII before persistence.</li>
                              <li>Bodies are encrypted at rest.</li>
                              <li>We group by theme; no LLM sifts through text.</li>
                              <li>Quotes appear only at or above k.</li>
                            </ul>
                          </div>
                        </div>

                        <div className="flex flex-wrap items-center gap-3">
                          <Button variant="secondary" onClick={() => setStep(0)}>Start over</Button>
                          <Button>Install to Slack <ArrowRight className="ml-2 h-4 w-4" /></Button>
                          <Button variant="ghost" className="gap-2"><Share2 className="h-4 w-4" /> Share this demo</Button>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
              </AnimatePresence>

              <div id="aria-live" className="sr-only" aria-live="polite" />
            </div>

            {/* Right column: Trust mini-FAQ */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Trust, at a glance</CardTitle>
                  <CardDescription>Clear answers to the common questions.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3 text-sm text-slate-700">
                  <details className="group">
                    <summary className="cursor-pointer font-medium">Can admins figure out it was me?</summary>
                    <p className="mt-2 text-slate-600">We keep identity in Slack, scrub PII, and gate quotes behind a k-threshold so individuals aren’t singled out.</p>
                  </details>
                  <Separator />
                  <details className="group">
                    <summary className="cursor-pointer font-medium">Do you store my words in plaintext?</summary>
                    <p className="mt-2 text-slate-600">No. Bodies are encrypted at rest. This demo shows a ciphertext preview, not your raw text.</p>
                  </details>
                  <Separator />
                  <details className="group">
                    <summary className="cursor-pointer font-medium">Do you use AI to read messages?</summary>
                    <p className="mt-2 text-slate-600">No LLM reads your text. We use embeddings-like scoring to cluster themes—simple math, not a chatbot.</p>
                  </details>
                  <Separator />
                  <details className="group">
                    <summary className="cursor-pointer font-medium">What if my team is small?</summary>
                    <p className="mt-2 text-slate-600">We withhold quotes below k. Even strong opinions don’t surface as quotes until it’s safe to do so.</p>
                  </details>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* Footer */}
        <footer className="px-5 sm:px-8 pb-10">
          <div className="max-w-6xl mx-auto flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
            <p className="text-sm text-slate-500">
              This page is a client-side simulation for demonstration. In production, encryption occurs server-side; identity remains in Slack; quotes appear only ≥ k.
            </p>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="rounded-full">Accessible</Badge>
              <Badge variant="outline" className="rounded-full">Client-side</Badge>
              <Badge variant="outline" className="rounded-full">Zero-compute</Badge>
            </div>
          </div>
        </footer>
      </div>
    </TooltipProvider>
  );
}
Notes for your team
Brand fit: Uses your Tailwind/shadcn stack; copy is short, readable, and confidence-building.

No flicker: Debounced + hysteresis multi-label themes with “why” terms shown.

Proof of privacy: Strong scrub (including Slack formats) with visible redactions.

Guidance, not just gating: Anonymity risk meter explains how to be safer.

Zero compute: Fully client-side; no network traffic.